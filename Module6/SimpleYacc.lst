
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y - 07.11.2018 21:22:15>
// ==========================================================================
//  Version:  1.5.0
//  Machine:  DESKTOP-T5P0M2C
//  DateTime: 07.11.2018 21:25:24
//  UserName: Alex
// ==========================================================================


%{
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public BlockNode root; // Êîðíåâîé óçåë ñèíòàêñè÷åñêîãî äåðåâà 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
%}

%output = SimpleYacc.cs

%union { 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public VarDefNode varVal;
       }

%using ProgramTree;

%namespace SimpleParser

%token BEGIN END CYCLE ASSIGN SEMICOLON WHILE DO REPEAT UNTIL FOR TO WRITE OPENBRACKET CLOSEBRACKET IF THEN ELSE VAR
%token <iVal> INUM 
%token <dVal> RNUM 
%token <sVal> ID

%type <eVal> expr ident 
%type <stVal> assign statement cycle while repeat for write if
%type <blVal> stlist block
%type <varVal> var

%%
// Error: NonTerminal symbol "COMMA" has no productions
// Warning: Terminating COMMA fixes the following size-1 NonTerminal set
   // {COMMA}
// Error: There are 1 non-terminating NonTerminal Symbols
   //  {COMMA}
// ---------------------------------------------------------------------

progr   : block { root = $1; }
		;

stlist	: statement 
			{ 
				$$ = new BlockNode($1); 
			}
		| stlist SEMICOLON statement 
			{ 
				$1.Add($3); 
				$$ = $1; 
			}
		;

statement: assign { $$ = $1; }
		| block   { $$ = $1; }
		| cycle   { $$ = $1; }
		| while	  { $$ = $1; }
		| repeat  { $$ = $1; }
		| for	  { $$ = $1; }
		| write	  { $$ = $1; }
		| if	  { $$ = $1; }
		| var	  { $$ = $1; }
	;

ident 	: ID { $$ = new IdNode($1); }	
		;
	
assign 	: ident ASSIGN expr { $$ = new AssignNode($1 as IdNode, $3); }
		;

expr	: ident  { $$ = $1 as IdNode; }
		| INUM { $$ = new IntNumNode($1); }
		;

block	: BEGIN stlist END { $$ = $2; }
		;

cycle	: CYCLE expr statement { $$ = new CycleNode($2, $3); }
		;

while	: WHILE expr DO statement { $$ = new WhileNode($2, $4); }
		;

repeat	: REPEAT stlist UNTIL expr { $$ = new RepeatNode($2, $4); }
		;

for		: FOR assign TO expr DO statement { $$ = new ForNode($2 as AssignNode, $4, $6); }
		;

write	: WRITE OPENBRACKET expr CLOSEBRACKET { $$ = new WriteNode($3); }
		;

if		: IF expr THEN statement { $$ = new IfNode($2, $4); }
		| IF expr THEN statement ELSE statement { $$ = new IfNode($2, $4, $6); }
		;

var		: VAR partvar { $$ = new VarDefNode($1); }
		;

partvar	: ID { $$ = new PartvarNode($1 as IdNode);  }
		| partvar COMMA ID { $1.Add($3 as IdNode); $$ = $1; }
		;



%%

// ==========================================================================

