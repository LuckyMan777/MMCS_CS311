// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  STA200B1-203-22
// DateTime: 29.10.2018 12:54:45
// UserName: arudnev
// Input file <SimpleYacc.y - 29.10.2018 12:54:43>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,WHILE=8,DO=9,REPEAT=10,UNTIL=11,FOR=12,
    TO=13,WRITE=14,OPENBRACKET=15,CLOSEBRACKET=16,IF=17,THEN=18,
    ELSE=19,INUM=20,RNUM=21,ID=22};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y - 29.10.2018 12:54:43
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public BlockNode root; // Êîðíåâîé óçåë ñèíòàêñè÷åñêîãî äåðåâà 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y - 29.10.2018 12:54:43

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[25];
  private static State[] states = new State[51];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "assign", "statement", "cycle", "while", "repeat", "for", 
      "write", "if", "stlist", "block", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-13,1,-12,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{22,14,3,4,5,18,8,22,10,27,12,33,14,40,17,45},new int[]{-11,5,-4,31,-3,9,-2,10,-12,16,-5,17,-6,21,-7,26,-8,32,-9,39,-10,44});
    states[5] = new State(new int[]{4,6,7,7});
    states[6] = new State(-17);
    states[7] = new State(new int[]{22,14,3,4,5,18,8,22,10,27,12,33,14,40,17,45},new int[]{-4,8,-3,9,-2,10,-12,16,-5,17,-6,21,-7,26,-8,32,-9,39,-10,44});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{6,11});
    states[11] = new State(new int[]{22,14,20,15},new int[]{-1,12,-2,13});
    states[12] = new State(-14);
    states[13] = new State(-15);
    states[14] = new State(-13);
    states[15] = new State(-16);
    states[16] = new State(-6);
    states[17] = new State(-7);
    states[18] = new State(new int[]{22,14,20,15},new int[]{-1,19,-2,13});
    states[19] = new State(new int[]{22,14,3,4,5,18,8,22,10,27,12,33,14,40,17,45},new int[]{-4,20,-3,9,-2,10,-12,16,-5,17,-6,21,-7,26,-8,32,-9,39,-10,44});
    states[20] = new State(-18);
    states[21] = new State(-8);
    states[22] = new State(new int[]{22,14,20,15},new int[]{-1,23,-2,13});
    states[23] = new State(new int[]{9,24});
    states[24] = new State(new int[]{22,14,3,4,5,18,8,22,10,27,12,33,14,40,17,45},new int[]{-4,25,-3,9,-2,10,-12,16,-5,17,-6,21,-7,26,-8,32,-9,39,-10,44});
    states[25] = new State(-19);
    states[26] = new State(-9);
    states[27] = new State(new int[]{22,14,3,4,5,18,8,22,10,27,12,33,14,40,17,45},new int[]{-11,28,-4,31,-3,9,-2,10,-12,16,-5,17,-6,21,-7,26,-8,32,-9,39,-10,44});
    states[28] = new State(new int[]{11,29,7,7});
    states[29] = new State(new int[]{22,14,20,15},new int[]{-1,30,-2,13});
    states[30] = new State(-20);
    states[31] = new State(-3);
    states[32] = new State(-10);
    states[33] = new State(new int[]{22,14},new int[]{-3,34,-2,10});
    states[34] = new State(new int[]{13,35});
    states[35] = new State(new int[]{22,14,20,15},new int[]{-1,36,-2,13});
    states[36] = new State(new int[]{9,37});
    states[37] = new State(new int[]{22,14,3,4,5,18,8,22,10,27,12,33,14,40,17,45},new int[]{-4,38,-3,9,-2,10,-12,16,-5,17,-6,21,-7,26,-8,32,-9,39,-10,44});
    states[38] = new State(-21);
    states[39] = new State(-11);
    states[40] = new State(new int[]{15,41});
    states[41] = new State(new int[]{22,14,20,15},new int[]{-1,42,-2,13});
    states[42] = new State(new int[]{16,43});
    states[43] = new State(-22);
    states[44] = new State(-12);
    states[45] = new State(new int[]{22,14,20,15},new int[]{-1,46,-2,13});
    states[46] = new State(new int[]{18,47});
    states[47] = new State(new int[]{22,14,3,4,5,18,8,22,10,27,12,33,14,40,17,45},new int[]{-4,48,-3,9,-2,10,-12,16,-5,17,-6,21,-7,26,-8,32,-9,39,-10,44});
    states[48] = new State(new int[]{19,49,4,-23,7,-23,11,-23});
    states[49] = new State(new int[]{22,14,3,4,5,18,8,22,10,27,12,33,14,40,17,45},new int[]{-4,50,-3,9,-2,10,-12,16,-5,17,-6,21,-7,26,-8,32,-9,39,-10,44});
    states[50] = new State(-24);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-14, new int[]{-13,2});
    rules[2] = new Rule(-13, new int[]{-12});
    rules[3] = new Rule(-11, new int[]{-4});
    rules[4] = new Rule(-11, new int[]{-11,7,-4});
    rules[5] = new Rule(-4, new int[]{-3});
    rules[6] = new Rule(-4, new int[]{-12});
    rules[7] = new Rule(-4, new int[]{-5});
    rules[8] = new Rule(-4, new int[]{-6});
    rules[9] = new Rule(-4, new int[]{-7});
    rules[10] = new Rule(-4, new int[]{-8});
    rules[11] = new Rule(-4, new int[]{-9});
    rules[12] = new Rule(-4, new int[]{-10});
    rules[13] = new Rule(-2, new int[]{22});
    rules[14] = new Rule(-3, new int[]{-2,6,-1});
    rules[15] = new Rule(-1, new int[]{-2});
    rules[16] = new Rule(-1, new int[]{20});
    rules[17] = new Rule(-12, new int[]{3,-11,4});
    rules[18] = new Rule(-5, new int[]{5,-1,-4});
    rules[19] = new Rule(-6, new int[]{8,-1,9,-4});
    rules[20] = new Rule(-7, new int[]{10,-11,11,-1});
    rules[21] = new Rule(-8, new int[]{12,-3,13,-1,9,-4});
    rules[22] = new Rule(-9, new int[]{14,15,-1,16});
    rules[23] = new Rule(-10, new int[]{17,-1,18,-4});
    rules[24] = new Rule(-10, new int[]{17,-1,18,-4,19,-4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); 
			}
        break;
      case 4: // stlist -> stlist, SEMICOLON, statement
{ 
				ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
			}
        break;
      case 5: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 6: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 7: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 9: // statement -> repeat
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 10: // statement -> for
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 11: // statement -> write
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 12: // statement -> if
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 13: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 14: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 15: // expr -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 16: // expr -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 17: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 18: // cycle -> CYCLE, expr, statement
{ CurrentSemanticValue.stVal = new CycleNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 19: // while -> WHILE, expr, DO, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 20: // repeat -> REPEAT, stlist, UNTIL, expr
{ CurrentSemanticValue.stVal = new RepeatNode(ValueStack[ValueStack.Depth-3].blVal, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 21: // for -> FOR, assign, TO, expr, DO, statement
{ CurrentSemanticValue.stVal = new ForNode(ValueStack[ValueStack.Depth-5].stVal as AssignNode, ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 22: // write -> WRITE, OPENBRACKET, expr, CLOSEBRACKET
{ CurrentSemanticValue.stVal = new WriteNode(ValueStack[ValueStack.Depth-2].eVal); }
        break;
      case 23: // if -> IF, expr, THEN, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 24: // if -> IF, expr, THEN, statement, ELSE, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-5].eVal, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
